// Generated by view binder compiler. Do not edit!
package com.example.fitgenerator.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import com.example.fitgenerator.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ChooseFitItemBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final ChooseFitItemRowBinding rowBottom;

  @NonNull
  public final ChooseFitItemRowBinding rowLayer;

  @NonNull
  public final ChooseFitItemRowBinding rowShoes;

  @NonNull
  public final ChooseFitItemRowBinding rowTop;

  private ChooseFitItemBinding(@NonNull ConstraintLayout rootView,
      @NonNull ChooseFitItemRowBinding rowBottom, @NonNull ChooseFitItemRowBinding rowLayer,
      @NonNull ChooseFitItemRowBinding rowShoes, @NonNull ChooseFitItemRowBinding rowTop) {
    this.rootView = rootView;
    this.rowBottom = rowBottom;
    this.rowLayer = rowLayer;
    this.rowShoes = rowShoes;
    this.rowTop = rowTop;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ChooseFitItemBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ChooseFitItemBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.choose_fit_item, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ChooseFitItemBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.rowBottom;
      View rowBottom = rootView.findViewById(id);
      if (rowBottom == null) {
        break missingId;
      }
      ChooseFitItemRowBinding binding_rowBottom = ChooseFitItemRowBinding.bind(rowBottom);

      id = R.id.rowLayer;
      View rowLayer = rootView.findViewById(id);
      if (rowLayer == null) {
        break missingId;
      }
      ChooseFitItemRowBinding binding_rowLayer = ChooseFitItemRowBinding.bind(rowLayer);

      id = R.id.rowShoes;
      View rowShoes = rootView.findViewById(id);
      if (rowShoes == null) {
        break missingId;
      }
      ChooseFitItemRowBinding binding_rowShoes = ChooseFitItemRowBinding.bind(rowShoes);

      id = R.id.rowTop;
      View rowTop = rootView.findViewById(id);
      if (rowTop == null) {
        break missingId;
      }
      ChooseFitItemRowBinding binding_rowTop = ChooseFitItemRowBinding.bind(rowTop);

      return new ChooseFitItemBinding((ConstraintLayout) rootView, binding_rowBottom,
          binding_rowLayer, binding_rowShoes, binding_rowTop);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
